class SlidingPuzzle:
    def __init__(self, initial_state):
        self.state = initial_state

    def display(self):
        for row in self.state:
            print(" ".join(map(str, row)))

    def find_empty_space(self):
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    return i, j

    def is_valid_move(self, row, col):
        empty_row, empty_col = self.find_empty_space()
        return (
            (row == empty_row and abs(col - empty_col) == 1) or
            (col == empty_col and abs(row - empty_row) == 1)
        )

    def move(self, row, col):
        if self.is_valid_move(row, col):
            empty_row, empty_col = self.find_empty_space()
            self.state[empty_row][empty_col], self.state[row][col] = self.state[row][col], self.state[empty_row][empty_col]
        else:
            print("Invalid move!")

    def is_solved(self):
        return self.state == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]


# Example usage:
initial_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
puzzle = SlidingPuzzle(initial_state)

while not puzzle.is_solved():
    puzzle.display()
    row = int(input("Enter row of the tile to move: "))
    col = int(input("Enter column of the tile to move: "))
    puzzle.move(row, col)

print("Puzzle solved!")

OUTPUT:
None 1 8
2 3 5
4 7 6
Enter move (UP/DOWN/LEFT/RIGHT): UP
Invalid move. Try again.
None 1 8
2 3 5
4 7 6
