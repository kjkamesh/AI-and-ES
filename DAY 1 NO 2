def is_safe(board, row, col, n):
    # Check if there is a queen in the same row
    if any(board[row]):
        return False

    # Check if there is a queen in the same column
    if any(board[i][col] for i in range(n)):
        return False

    # Check if there is a queen in the upper-left to lower-right diagonal
    if any(board[i][j] for i, j in zip(range(row, -1, -1), range(col, -1, -1))):
        return False

    # Check if there is a queen in the upper-right to lower-left diagonal
    if any(board[i][j] for i, j in zip(range(row, -1, -1), range(col, n))):
        return False

    return True

def print_solution(board):
    for row in board:
        print(" ".join("Q" if cell else "." for cell in row))
    print()

def solve_nqueens(board, row, n):
    if row == n:
        print_solution(board)
        return

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            solve_nqueens(board, row + 1, n)
            board[row][col] = 0  # Backtrack

def main():
    n = 8
    board = [[0] * n for _ in range(n)]
    solve_nqueens(board, 0, n)

if __name__ == "__main__":
    main()

OUTPUT:
Solution:
1 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 1 
0 1 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 0 1 0 0 
0 0 1 0 0 0 0 0 
