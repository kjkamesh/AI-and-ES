class VacuumCleaner:
    def __init__(self, grid):
        self.grid = grid
        self.rows = len(grid)
        self.cols = len(grid[0])
        self.current_position = (0, 0)

    def display_grid(self):
        for row in self.grid:
            print(" ".join(map(str, row)))
        print()

    def move_up(self):
        if self.current_position[0] > 0:
            self.current_position = (self.current_position[0] - 1, self.current_position[1])

    def move_down(self):
        if self.current_position[0] < self.rows - 1:
            self.current_position = (self.current_position[0] + 1, self.current_position[1])

    def move_left(self):
        if self.current_position[1] > 0:
            self.current_position = (self.current_position[0], self.current_position[1] - 1)

    def move_right(self):
        if self.current_position[1] < self.cols - 1:
            self.current_position = (self.current_position[0], self.current_position[1] + 1)

    def clean_current_cell(self):
        self.grid[self.current_position[0]][self.current_position[1]] = 0

    def clean_entire_grid(self):
        while any(1 in row for row in self.grid):
            self.display_grid()
            self.clean_current_cell()

            if self.current_position[1] < self.cols - 1 and self.grid[self.current_position[0]][self.current_position[1] + 1] == 1:
                self.move_right()
            elif self.current_position[0] < self.rows - 1 and self.grid[self.current_position[0] + 1][self.current_position[1]] == 1:
                self.move_down()
            elif self.current_position[1] > 0 and self.grid[self.current_position[0]][self.current_position[1] - 1] == 1:
                self.move_left()
            elif self.current_position[0] > 0 and self.grid[self.current_position[0] - 1][self.current_position[1]] == 1:
                self.move_up()

# Example usage
grid = [
    [1, 0, 1],
    [1, 1, 0],
    [0, 1, 1]
]

vacuum = VacuumCleaner(grid)
vacuum.clean_entire_grid()
