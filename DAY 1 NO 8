class GridProblem:
    def __init__(self, grid):
        self.grid = grid
        self.rows = len(grid)
        self.cols = len(grid[0])

    def is_valid_move(self, position):
        row, col = position
        return 0 <= row < self.rows and 0 <= col < self.cols and self.grid[row][col] == 0

    def get_neighbors(self, position):
        row, col = position
        possible_moves = [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]
        return [move for move in possible_moves if self.is_valid_move(move)]

    def dfs(self, current_position, goal, visited, path):
        if current_position == goal:
            return path + [current_position]

        if current_position not in visited:
            visited.add(current_position)
            neighbors = self.get_neighbors(current_position)
            for neighbor in neighbors:
                result = self.dfs(neighbor, goal, visited, path + [current_position])
                if result:
                    return result

        return None

    def find_path_dfs(self, start, goal):
        visited = set()
        return self.dfs(start, goal, visited, [])

# Example usage
grid = [
    [0, 0, 1, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 0, 0, 1],
    [0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0]
]

problem = GridProblem(grid)
start_position = (0, 0)
goal_position = (4, 4)

solution_path = problem.find_path_dfs(start_position, goal_position)

if solution_path:
    print("Path found:", solution_path)
else:
    print("No path found.")
