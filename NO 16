import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def evaluate(board):
    # Check rows, columns, and diagonals to determine the game state
    for i in range(3):
        # Check rows
        if all(board[i][j] == 'X' for j in range(3)):
            return 1
        elif all(board[i][j] == 'O' for j in range(3)):
            return -1

        # Check columns
        if all(board[j][i] == 'X' for j in range(3)):
            return 1
        elif all(board[j][i] == 'O' for j in range(3)):
            return -1

    # Check diagonals
    if all(board[i][i] == 'X' for i in range(3)):
        return 1
    elif all(board[i][2 - i] == 'X' for i in range(3)):
        return 1
    elif all(board[i][i] == 'O' for i in range(3)):
        return -1
    elif all(board[i][2 - i] == 'O' for i in range(3)):
        return -1

    return 0  # Game is not finished

def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)

def minimax(board, depth, alpha, beta, maximizing_player):
    result = evaluate(board)

    if result != 0:
        return result

    if is_board_full(board):
        return 0

    if maximizing_player:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = minimax(board, depth + 1, alpha, beta, False)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = minimax(board, depth + 1, alpha, beta, True)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)
    alpha = -math.inf
    beta = math.inf

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                move_val = minimax(board, 0, alpha, beta, False)
                board[i][j] = ' '

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

                alpha = max(alpha, move_val)

    return best_move

def play_tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]

    print("Welcome to Tic Tac Toe!")
    print_board(board)

    for _ in range(9):
        print("Player X's turn:")
        x, y = find_best_move(board)
        board[x][y] = 'X'
        print_board(board)

        if evaluate(board) == 1:
            print("Player X wins!")
            break
        elif is_board_full(board):
            print("It's a tie!")
            break

        print("Player O's turn:")
        move = int(input("Enter your move (1-9): ")) - 1
        row, col = divmod(move, 3)

        if board[row][col] == ' ':
            board[row][col] = 'O'
        else:
            print("Invalid move. Cell is already occupied. Try again.")

        print_board(board)

        if evaluate(board) == -1:
            print("Player O wins!")
            break
        elif is_board_full(board):
            print("It's a tie!")
            break

if __name__ == "__main__":
    play_tic_tac_toe()
